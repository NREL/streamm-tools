************************************************************************************
 This test shows various operators within Particle and ParticleContainer classes    
 Also shows memory management structure and access methods
************************************************************************************ 


 Cleaning memory for initial objects 

x = atoms1[1] is returns x as an effective 'reference' 

x =  {'position': [0.2, 1.3, 33.0], 'charge': 2.0, 'type': 'Si', 'mass': 1.23, 'tagsDict': {'type': 'Si'}} 

after changing with x.position = [1.0, 1.0, 1.0]
x =  {'position': [1.0, 1.0, 1.0], 'charge': 2.0, 'type': 'Si', 'mass': 1.23, 'tagsDict': {'type': 'Si'}} 

atoms1 has been changed

 Contains particle objects: 
1 {'position': [1.0, 1.0, 1.0], 'charge': 2.0, 'type': 'Si', 'mass': 1.23, 'tagsDict': {'type': 'Si'}}
2 {'position': [5.0, 2.3, -22.1], 'charge': 1.0, 'type': 'C', 'mass': 2.34, 'tagsDict': {'type': 'C'}}

before, atoms1-->  
 Contains particle objects: 
1 {'position': [1.0, 1.0, 1.0], 'charge': 2.0, 'type': 'Si', 'mass': 1.23, 'tagsDict': {'type': 'Si'}}
2 {'position': [5.0, 2.3, -22.1], 'charge': 1.0, 'type': 'C', 'mass': 2.34, 'tagsDict': {'type': 'C'}}
 

after 'del atoms1[2]' atoms1 -->  
 Contains particle objects: 
1 {'position': [1.0, 1.0, 1.0], 'charge': 2.0, 'type': 'Si', 'mass': 1.23, 'tagsDict': {'type': 'Si'}}
 

Testing 'in' operator (1 in atoms1)
atoms1 contains gid 1
Testing 'in' operator (5 in atoms1)
key not found in atoms1
 
Will print the new atoms1 after adding atoms1 += atoms2

 Contains particle objects: 
1 {'position': [1.0, 1.0, 1.0], 'charge': 2.0, 'type': 'Si', 'mass': 1.23, 'tagsDict': {'type': 'Si'}}
3 {'position': [5.0, 2.3, -20.1], 'charge': 1.0, 'type': 'C', 'mass': 2.34, 'tagsDict': {'type': 'C'}}
4 {'position': [0.0, 2.3, -20.1], 'charge': 1.0, 'type': 'C', 'mass': 2.34, 'tagsDict': {'type': 'C'}}

