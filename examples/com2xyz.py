#! /usr/bin/env python

from structureContainer import StructureContainer
from particles     import Particle, ParticleContainer

def get_options():
    import os, os.path
    from optparse import OptionParser
 
    usage = "usage: %prog [options] \n"
    parser = OptionParser(usage=usage)
    
    parser.add_option("-v","--verbose", dest="verbose", default=False,action="store_true", help="Verbose output ")
    parser.add_option("--in_com", dest="in_com", type="string", default="", help="Input gaussain .com file ")
    parser.add_option("--out_xyz", dest="out_xyz", type="string", default="", help="Output xyz (xmol) file")
    #
    (options, args) = parser.parse_args()
        
    return options, args

def check_int(var):
    """
    check if variable var is an integer
    """
    
    try:
        x = int(var)
    except ValueError:
        return False
    
    return True
    
def read_com(strucC,data_file):
    """
    Read in structure information from gaussian com file

    Args:
        strucC (StructureContainer) 
        data_file (str) gaussian com file
    Return:
        strucC (StructureContainer) 
        
    """

    # Check to see if a previous read has occured
    pt_update = False
    #if( len(strucC.ptclC) > 0 ):
    #    pt_update = True

    F = open(data_file,'r')
    Lines = F.readlines()
    F.close()

    line_cnt = 0

    read_r = False
    
    for line in Lines :
        col = line.split()
        line_cnt += 1

        if( read_r ):
            if (  len(col) < 4  ):
                read_r = False
            else:
                p_i += 1
                symbol = str(col[0])
                r_i = [float(col[1]),float(col[2]),float(col[3]) ]
                
                if( pt_update ):
                    strucC.ptclC[p_i].position = r_i
                    strucC.ptclC[p_i].setTagsDict({"symbol":symbol})                    
                else:
                    pt_i = Particle( r_i ) 
                    pt_i.setTagsDict({"symbol":symbol})                    
                    strucC.ptclC.put(pt_i)

        if( len(col) == 2 ):
            if( check_int( col[0] ) and check_int( col[1] )  ):
                read_r = True
                p_i = 0
        
    return (strucC)


def write_xmol(strucC,data_file):

    """
    Write a structure  to an xmol file

    Args:
        data_file    (str) xmol file name
    Reutrns
        null
    """
    # Open xmol file 
    F = open(data_file,"w")
    # Loop over structures
    comment = " generated by com2xyz.py "
    F.write(" %d \n" % len( strucC.ptclC ) )
    F.write(" %s \n"%comment)
    for pid, ptclObj  in strucC.ptclC:
        r_i = ptclObj.position
        symbol = str(ptclObj.tagsDict['symbol'])
        F.write( " %5s %16.8f %16.8f %16.8f \n"  % (symbol ,float(r_i[0]), float(r_i[1]),float(r_i[2]) ) )   
    F.close()



def main():
    """
    Read in gaussian fchk file and create an xyz file 
    """

    #        
    # Read options 
    #
    options, args = get_options()
    #
    #  Initialize blank system 
    # 
    struc_o = StructureContainer()
    #struc_o.unset_verbose()
    #param_o = ParameterContainer()

    struc_o = read_com(struc_o,options.in_com)
    write_xmol(struc_o,options.out_xyz)

    
if __name__=="__main__":
    main()

